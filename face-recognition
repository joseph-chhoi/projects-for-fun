import cv2
import numpy as np
import face_recognition

def load_and_prepare_image(image_path):
    """
    Loads an image file and converts it from BGR (OpenCV format)
    to RGB (face_recognition format).
    """
    image = face_recognition.load_image_file(image_path)
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Load images (you can add more images for different individuals, e.g., Bill Gates)
reference_image = load_and_prepare_image('Image/ElonMusk.jpg')
test_image = load_and_prepare_image('Image/ElonTest.jpg')

# Detect face locations and compute encodings for the test image
test_face_locations = face_recognition.face_locations(test_image)
if test_face_locations:
    # Process the first detected face in the test image
    test_face_location = test_face_locations[0]
    test_face_encoding = face_recognition.face_encodings(test_image, [test_face_location])[0]
    
    # Draw a rectangle around the detected face in the test image
    top, right, bottom, left = test_face_location
    cv2.rectangle(test_image, (left, top), (right, bottom), (255, 0, 255), 2)
else:
    print("No face detected in the test image.")

# Detect face locations and compute encodings for the reference image
ref_face_locations = face_recognition.face_locations(reference_image)
if ref_face_locations:
    ref_face_encoding = face_recognition.face_encodings(reference_image, [ref_face_locations[0]])[0]
else:
    print("No face detected in the reference image.")

# If both encodings are available, compare the faces
if test_face_locations and ref_face_locations:
    matches = face_recognition.compare_faces([ref_face_encoding], test_face_encoding)
    face_distance = face_recognition.face_distance([ref_face_encoding], test_face_encoding)
    
    print("Match result:", matches)
    print("Face distance:", face_distance)
    
    # Annotate the test image with the results
    result_text = f'{matches[0]} {round(face_distance[0], 2)}'
    cv2.putText(test_image, result_text, (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)

# Display the images in separate windows
cv2.imshow('Reference Image - Elon Musk', reference_image)
cv2.imshow('Test Image', test_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

