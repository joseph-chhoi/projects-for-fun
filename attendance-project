import cv2
import numpy as np
import face_recognition
import os
from datetime import datetime  # Use datetime for timestamping

ATTENDANCE_DIR = 'Attendance'
CSV_FILE = 'Attendance.csv'

def load_images_and_names(directory):
    """
    Load images from the given directory and extract names from file names.
    """
    images = []
    names = []
    files = os.listdir(directory)
    print("Found files:", files)
    
    for file in files:
        img_path = os.path.join(directory, file)
        img = cv2.imread(img_path)
        if img is not None:
            images.append(img)
            # Split filename and use the base name (without extension) as the person's name
            name, _ = os.path.splitext(file)
            names.append(name)
    print("Names extracted:", names)
    return images, names

def compute_face_encodings(images):
    """
    Compute face encodings for a list of images.
    """
    encoding_list = []
    for img in images:
        # Convert from BGR to RGB since face_recognition uses RGB format
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encodings = face_recognition.face_encodings(rgb_img)
        if encodings:  # If a face was found in the image
            encoding_list.append(encodings[0])
    return encoding_list

def record_attendance(name, csv_path=CSV_FILE):
    """
    Append the name and current time to the CSV file if the name is not already present.
    """
    try:
        with open(csv_path, 'r+') as file:
            lines = file.readlines()
            recorded_names = [line.split(',')[0] for line in lines]
            if name not in recorded_names:
                now = datetime.now()
                time_str = now.strftime('%H:%M:%S')
                file.write(f'\n{name},{time_str}')
    except FileNotFoundError:
        # File doesn't exist, so create it and add the first record
        with open(csv_path, 'w') as file:
            now = datetime.now()
            time_str = now.strftime('%H:%M:%S')
            file.write(f'{name},{time_str}')

def main():
    # Load reference images and names for attendance
    images, names = load_images_and_names(ATTENDANCE_DIR)
    known_encodings = compute_face_encodings(images)
    print("Face encodings computed for known faces.")

    # Initialize webcam capture
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Reduce image size for faster processing
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

        # Detect face locations and encodings in the current frame
        face_locations = face_recognition.face_locations(rgb_small_frame)
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        for face_encoding, face_location in zip(face_encodings, face_locations):
            matches = face_recognition.compare_faces(known_encodings, face_encoding)
            face_distances = face_recognition.face_distance(known_encodings, face_encoding)
            best_match_index = np.argmin(face_distances)

            if matches[best_match_index]:
                detected_name = names[best_match_index].upper()
                record_attendance(detected_name)

                # Scale back face location to original frame size
                top, right, bottom, left = face_location
                top *= 4
                right *= 4
                bottom *= 4
                left *= 4

                # Draw a rectangle around the face and label it with the name
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 255, 0), cv2.FILLED)
                cv2.putText(frame, detected_name, (left + 6, bottom - 6),
                            cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)

        cv2.imshow('Webcam', frame)
        # Press 'q' to exit the webcam loop
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()

